@model dynamic
@{
    ViewData["Title"] = "Gestión de Empleados";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var salarios = ViewBag.Salarios as IEnumerable<CEGA.Models.EmpleadosSalarios>;
    var vacaciones = ViewBag.Vacaciones as IEnumerable<CEGA.Models.VacacionesEmpleado>;
    var puestos = ViewBag.Puestos as IEnumerable<CEGA.Models.PuestoEmpleado>;
    var incapacidades = ViewBag.Incapacidades as IEnumerable<CEGA.Models.IncapacidadEmpleado>;
    var empleados = ViewBag.Empleados as IEnumerable<CEGA.Models.ApplicationUser>;

    var salCount = salarios?.Count() ?? 0;
    var vacCount = vacaciones?.Count() ?? 0;
    var pueCount = puestos?.Count() ?? 0;
    var incCount = incapacidades?.Count() ?? 0;
    var empCount = empleados?.Count() ?? 0;
}
<!-- Header con fondo -->
<div class="py-4 text-center text-white mb-4"
     style="background: var(--brand-mid); border-radius: .75rem;">
    <h2 class="fw-bold mb-3">Módulo de Empleados</h2>
    <p class="mb-0 fs-5">
        Administra <span class="fw-semibold">salarios</span>,
        <span class="fw-semibold">vacaciones</span>,
        <span class="fw-semibold">puestos</span> e
        <span class="fw-semibold">incapacidades</span>.
    </p>
</div>

<!-- Alertas -->
@if (TempData["Mensaje"] != null)
{
    <div class="alert alert-success mb-3">@TempData["Mensaje"]</div>
}
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger mb-3">@TempData["Error"]</div>
}

<!-- Tabs dentro de card -->
<div class="card card-lg">
    <div class="card-header p-0">
        <ul class="nav nav-tabs card-header-tabs nav-fill" id="empleadosTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active"
                        id="salario-tab"
                        data-bs-toggle="tab"
                        data-bs-target="#salario"
                        type="button"
                        role="tab"
                        aria-controls="salario"
                        aria-selected="true">
                    Salarios <span class="badge bg-success ms-1">@salCount</span>
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link"
                        id="vacaciones-tab"
                        data-bs-toggle="tab"
                        data-bs-target="#vacaciones"
                        type="button"
                        role="tab"
                        aria-controls="vacaciones"
                        aria-selected="false">
                    Vacaciones <span class="badge bg-success ms-1">@vacCount</span>
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link"
                        id="puesto-tab"
                        data-bs-toggle="tab"
                        data-bs-target="#puesto"
                        type="button"
                        role="tab"
                        aria-controls="puesto"
                        aria-selected="false">
                    Puestos <span class="badge bg-success ms-1">@pueCount</span>
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link"
                        id="incapacidad-tab"
                        data-bs-toggle="tab"
                        data-bs-target="#incapacidad"
                        type="button"
                        role="tab"
                        aria-controls="incapacidad"
                        aria-selected="false">
                    Incapacidades <span class="badge bg-success ms-1">@incCount</span>
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link"
                        id="empleado-tab"
                        data-bs-toggle="tab"
                        data-bs-target="#empleado"
                        type="button"
                        role="tab"
                        aria-controls="empleado"
                        aria-selected="false">
                    Empleados <span class="badge bg-success ms-1">@incCount</span>
                </button>
            </li>
        </ul>
    </div>

    <div class="card-body">
        <div class="tab-content mt-2">
            <div class="tab-pane fade show active" id="salario" role="tabpanel" aria-labelledby="salario-tab">
                @await Html.PartialAsync("_SalariosPartial", salarios)
            </div>
            <div class="tab-pane fade" id="vacaciones" role="tabpanel" aria-labelledby="vacaciones-tab">
                @await Html.PartialAsync("_VacacionesPartial", vacaciones)
            </div>
            <div class="tab-pane fade" id="puesto" role="tabpanel" aria-labelledby="puesto-tab">
                @await Html.PartialAsync("_PuestosPartial", puestos)
            </div>
            <div class="tab-pane fade" id="incapacidad" role="tabpanel" aria-labelledby="incapacidad-tab">
                @await Html.PartialAsync("_IncapacidadesPartial", incapacidades)
            </div>
            <div class="tab-pane fade" id="empleado" role="tabpanel" aria-labelledby="empleado-tab">
                @await Html.PartialAsync("_CrearEmpleadoPartial", new CEGA.Models.ViewModels.CrearEmpleadoVM())
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        (function () {
            const $ = id => document.getElementById(id);
            const fDepto    = $('fDepto');
            const fEmpleado = $('fEmpleado');
            const fTexto    = $('fTexto');
            const btnApply  = $('btnAplicar');
            const btnClear  = $('btnLimpiar');

            // --- Guardas por si no hay tabla (cuando no hay salarios) ---
            const table = document.getElementById('tablaResumen');
            const tbody = table ? table.querySelector('tbody') : null;

            // Colecciones seguras
            const rows = tbody ? Array.from(tbody.querySelectorAll('tr.emp-row')) : [];
            const details = new Map();
            if (tbody) {
                tbody.querySelectorAll('tr.emp-detail').forEach(d => details.set(d.id, d));
            }

            // Fila "Sin coincidencias" solo si existe tbody
            let emptyRow = null;
            if (tbody) {
                emptyRow = tbody.querySelector('tr.no-resultados');
                if (!emptyRow) {
                    emptyRow = document.createElement('tr');
                    emptyRow.className = 'no-resultados';
                    emptyRow.innerHTML = '<td colspan="4" class="text-center text-muted py-3">Sin coincidencias</td>';
                    emptyRow.style.display = 'none';
                    tbody.appendChild(emptyRow);
                }
            }

            function match(text, q) { return text.toLowerCase().includes(q.toLowerCase()); }

            function applyFilters() {
                const dep = (fDepto?.value || '').trim().toLowerCase();
                const emp = (fEmpleado?.value || '').trim();
                const q   = (fTexto?.value || '').trim();

                let visible = 0;

                // Si no hay filas (p.ej., no hay salarios), solo actualiza el contador y sal
                if (!rows.length) {
                    const countEl = document.getElementById('countTotal');
                    if (countEl) countEl.textContent = '0';
                    if (emptyRow) emptyRow.style.display = ''; // muestra "Sin coincidencias" si hay tbody
                    return;
                }

                rows.forEach(r => {
                    const area = (r.getAttribute('data-area') || '').trim().toLowerCase();
                    const uid  = (r.getAttribute('data-usuario') || '').trim();
                    const text = ((r.getAttribute('data-text') || '') + ' ' + uid).trim();

                    let ok = true;
                    if (dep) ok = ok && (area === dep);
                    if (emp) ok = ok && (uid === emp);
                    if (q)   ok = ok && match(text, q);

                    r.style.display = ok ? '' : 'none';

                    const btn = r.querySelector('[data-bs-target]');
                    const rid = btn ? btn.getAttribute('data-bs-target')?.replace('#', '') : null;
                    if (rid && details.has(rid)) details.get(rid).style.display = ok ? '' : 'none';

                    if (ok) visible++;
                });

                if (emptyRow) emptyRow.style.display = (visible === 0 ? '' : 'none');

                const countEl = document.getElementById('countTotal');
                if (countEl) countEl.textContent = String(visible);
            }

            btnApply?.addEventListener('click', applyFilters);
            fTexto?.addEventListener('keyup', e => { if (e.key === 'Enter') applyFilters(); });
            btnClear?.addEventListener('click', () => {
                if (fDepto)    fDepto.value = '';
                if (fEmpleado) fEmpleado.value = '';
                if (fTexto)    fTexto.value = '';
                applyFilters();
            });

            // Primera pasada
            applyFilters();
        })();
    </script>
}
