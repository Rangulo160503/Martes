@model IEnumerable<CEGA.Models.VacacionesEmpleado>
@using System.Globalization
@using System.Linq
@using CEGA.Models

@{
    ViewData["Title"] = "Vacaciones";

    // Para el dropdown de empleados (igual que en otras vistas)
    var empleados = ViewBag.Empleados as IEnumerable<ApplicationUser>;

    Func<string, string> BadgeClase = estado =>
    {
        if (string.IsNullOrWhiteSpace(estado)) return "bg-warning";
        return estado.Equals("Aprobado", StringComparison.OrdinalIgnoreCase) ? "bg-success"
             : estado.Equals("Rechazado", StringComparison.OrdinalIgnoreCase) ? "bg-danger"
             : "bg-warning"; // Pendiente / otros
    };

    // Mapa Id -> Nombre mostrado (Nombre Apellido o UserName)
    var nombrePorId = new Dictionary<string, string>();
    if (empleados != null)
    {
        foreach (var emp in empleados)
        {
            var display = string.IsNullOrWhiteSpace(($"{emp?.Nombre} {emp?.Apellido}").Trim())
                ? (emp?.UserName ?? emp?.Id)
                : $"{emp?.Nombre?.Trim()} {emp?.Apellido?.Trim()}";
            if (!string.IsNullOrEmpty(emp?.Id))
                nombrePorId[emp.Id] = display;
        }
    }
}

<h4 class="mt-2 mb-2">Solicitudes de vacaciones</h4>

<!-- Solicitar vacaciones: selecciona empleado + rango de fechas -->
<div class="card card-lg">
    <div class="card-header">Nueva solicitud</div>
    <div class="card-body">
        <form asp-action="SolicitarVacaciones" asp-controller="Empleados" method="post" class="row g-2" novalidate>
            @Html.AntiForgeryToken()

            <!-- Empleado -->
            <div class="col-md-4">
                <label class="form-label" for="UsuarioID">Empleado</label>
                <select id="UsuarioID" name="UsuarioID" class="form-select" required>
                    <option value="">— Seleccione —</option>
                    @if (empleados != null && empleados.Any())
                    {
                        foreach (var emp in empleados.OrderBy(e => e.UserName))
                        {
                            var display = string.IsNullOrWhiteSpace(($"{emp?.Nombre} {emp?.Apellido}").Trim())
                            ? (emp?.UserName ?? emp?.Id)
                            : $"{emp?.Nombre?.Trim()} {emp?.Apellido?.Trim()}";
                            <option value="@emp.Id">@display</option>
                        }
                    }
                    else
                    {
                        <option value="" disabled>— No hay empleados disponibles —</option>
                    }
                </select>
            </div>

            <!-- Rango de fechas -->
            <div class="col-md-5">
                <label class="form-label d-block">Periodo solicitado</label>
                <div class="row g-2">
                    <div class="col-6">
                        <input type="date" id="vac_ini" name="FechaInicio" class="form-control" required />
                        <div class="form-text">Inicio</div>
                    </div>
                    <div class="col-6">
                        <input type="date" id="vac_fin" name="FechaFin" class="form-control" />
                        <div class="form-text">Fin</div>
                    </div>
                </div>
                <div class="small text-muted mt-2">Total: <span id="vac_dias_txt">0</span> día(s)</div>
            </div>

            <!-- Días solicitados (se calcula automáticamente; se envía al backend) -->
            <div class="col-md-2">
                <label class="form-label" for="DiasSolicitados">Días</label>
                <input id="DiasSolicitados" name="DiasSolicitados" type="number" class="form-control" value="0" readonly />
            </div>

            <div class="col-md-1 d-flex align-items-end">
                <button type="submit" class="btn btn-accent w-100">Solicitar</button>
            </div>

            <div class="col-12">
                <div class="form-text">
                    El total de días se calcula en base al rango seleccionado (incluye fecha de inicio y fin).
                </div>
            </div>
        </form>
    </div>
</div>

<!-- ===== Listado ===== -->
<div class="card mt-3">
    <div class="card-header d-flex justify-content-between align-items-center">
        <span>Listado</span>
        <span class="text-muted small">@((Model?.Count() ?? 0)) registro(s)</span>
    </div>
    <div class="card-body p-0">
        @if (Model == null || !Model.Any())
        {
            <div class="m-3 alert alert-warning mb-0">No hay solicitudes de vacaciones registradas.</div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-striped table-hover align-middle mb-0">
                    <thead>
                        <tr>
                            <th style="min-width:180px;">Empleado</th>
                            <th style="min-width:140px;">Inicio</th>
                            <th style="min-width:140px;">Fin</th>
                            <th style="min-width:140px;">Días solicitados</th>
                            <th style="min-width:140px;">Días disponibles</th>
                            <th style="min-width:160px;">Fecha solicitud</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var v in Model.OrderByDescending(x => x.Id))
                        {
                            var nombre = (v.UsuarioID != null && nombrePorId.TryGetValue(v.UsuarioID, out var n)) ? n : v.UsuarioID;
                            var badge = BadgeClase(v.Estado);
                            DateTime? finCalc = (v.DiasSolicitados > 0)
                            ? v.FechaInicio.AddDays(v.DiasSolicitados - 1)
                            : (DateTime?)null;

                            <tr>
                                <td class="fw-semibold">@nombre</td>
                                <td>@v.FechaInicio.ToShortDateString()</td>
                                <td>@(finCalc.HasValue? finCalc.Value.ToShortDateString() : "—")</td>
                                <td>@v.DiasSolicitados</td>
                                <td>@v.DiasDisponibles</td>
                                <td>@v.FechaSolicitud.ToShortDateString()</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

<!-- Script inline para calcular días (funciona en vista o partial) -->
<script>
    (function () {
      const form = document.querySelector('form[method="post"][action*="SolicitarVacaciones"]')
                || document.querySelector('form[action$="SolicitarVacaciones"]');
      if (!form) return;

      const iniEl  = form.querySelector('#vac_ini');
      const finEl  = form.querySelector('#vac_fin');
      const outTxt = form.querySelector('#vac_dias_txt');
      const outInp = form.querySelector('#DiasSolicitados');
      if (!iniEl || !finEl || !outTxt || !outInp) return;

      const MS_PER_DAY = 24*60*60*1000;
      function parseDateUTC(s){ if(!s) return null; const [y,m,d]=s.split('-').map(Number); return (!y||!m||!d)?null:new Date(Date.UTC(y,m-1,d)); }
      function recalc(){
        const di=parseDateUTC(iniEl.value), df=parseDateUTC(finEl.value);
        if (iniEl.value) finEl.min = iniEl.value; else finEl.removeAttribute('min');
        let dias=0;
        if (di && df) { const diff=df-di; dias = diff>=0 ? Math.floor(diff/MS_PER_DAY)+1 : 0; }
        outTxt.textContent = String(dias);
        outInp.value = String(dias);
      }
      ['input','change','blur'].forEach(ev => { iniEl.addEventListener(ev,recalc); finEl.addEventListener(ev,recalc); });
      recalc();
    })();
</script>
