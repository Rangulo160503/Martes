@model IEnumerable<CEGA.Models.IncapacidadEmpleado>
@using System.Linq
@using System.Globalization
@using CEGA.Models

@{
    ViewData["Title"] = "Incapacidades";

    // Para el dropdown de empleados y sugerir salario diario (opcional)
    var empleados = ViewBag.Empleados as IEnumerable<ApplicationUser>;
    var salarios = ViewBag.Salarios as IEnumerable<EmpleadosSalarios>;

    var salPorUsuario = salarios?
        .GroupBy(s => s.UsuarioId)
        .ToDictionary(
            g => g.Key,
            g => g.OrderByDescending(x => x.FechaRegistro).FirstOrDefault()?.SalarioMensual ?? 0m
        );

    // Mapa Id -> Nombre mostrado
    var nombrePorId = new Dictionary<string, string>();
    if (empleados != null)
    {
        foreach (var emp in empleados)
        {
            var display = string.IsNullOrWhiteSpace(($"{emp?.Nombre} {emp?.Apellido}").Trim())
                ? (emp?.UserName ?? emp?.Id)
                : $"{emp?.Nombre?.Trim()} {emp?.Apellido?.Trim()}";
            if (!string.IsNullOrEmpty(emp?.Id))
                nombrePorId[emp.Id] = display;
        }
    }

    string FormatBytes(long? bytes)
    {
        if (bytes == null) return "—";
        double b = bytes.Value; string[] u = { "B", "KB", "MB", "GB" }; int i = 0;
        while (b >= 1024 && i < u.Length - 1) { b /= 1024; i++; }
        return $"{b:0.##} {u[i]}";
    }
}

<!-- Header -->
<div class="mb-2">
    <h4 class="mb-0">Incapacidades</h4>
    <p class="text-muted mb-0">Una incapacidad corresponde a días no pagados por el patrono. La cobertura de esos días corresponde al gobierno.</p>
</div>

<div class="card card-lg">
    <div class="card-header">Registrar incapacidad</div>
    <div class="card-body">
        <form asp-action="SubirIncapacidad" asp-controller="Empleados" method="post" enctype="multipart/form-data" class="row g-2">
            <div class="col-md-4">
                <label class="form-label" for="usuarioId">Empleado</label>
                <select id="usuarioId" name="usuarioId" class="form-select" required>
                    <option value="">— Seleccione —</option>
                    @if (empleados?.Any() == true)
                    {
                        foreach (var emp in empleados.OrderBy(e => e.UserName))
                        {
                            decimal? sMon = null;
                            if (salPorUsuario != null && !string.IsNullOrEmpty(emp.Id) && salPorUsuario.TryGetValue(emp.Id, out var sm))
                            {
                                sMon = sm;
                            }

                            var sDia = sMon.HasValue ? decimal.Round(sMon.Value / 30m, 2) : (decimal?)null;
                            var sDiaStr = sDia?.ToString(CultureInfo.InvariantCulture) ?? "";
                            var sMonStr = sMon?.ToString(CultureInfo.InvariantCulture) ?? "";

                            var display = string.IsNullOrWhiteSpace(($"{emp?.Nombre} {emp?.Apellido}").Trim())
                            ? (emp?.UserName ?? emp?.Id)
                            : $"{emp?.Nombre?.Trim()} {emp?.Apellido?.Trim()}";

                            <option value="@emp.Id"
                                    data-nombre="@display"
                                    data-salario-mensual="@sMonStr"
                                    data-salario-diario="@sDiaStr">
                                @display
                            </option>
                        }
                    }
                    else
                    {
                        <option value="" disabled>— No hay empleados disponibles —</option>
                    }
                </select>
                <div class="form-text">
                    Si el empleado tiene salario registrado, se sugiere salario diario para el cálculo informativo.
                </div>
            </div>

            <!-- Rango de fechas (opcional) -->
            <div class="col-md-4">
                <label class="form-label d-block">Periodo de incapacidad (opcional)</label>
                <div class="row g-2">
                    <div class="col-6">
                        <input type="datetime-local" id="ini_reg" name="fechaInicio" class="form-control" />
                    </div>
                    <div class="col-6">
                        <input type="datetime-local" id="fin_reg" name="fechaFin" class="form-control" />
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <label class="form-label" for="descripcion">Descripción</label>
                <input id="descripcion" name="descripcion" class="form-control" placeholder="Motivo o detalle de la incapacidad" required />
            </div>

            <div class="col-md-10">
                <label class="form-label" for="archivo">Archivo</label>
                <input id="archivo" name="archivo" type="file" class="form-control" required />
                <div class="form-text">
                    Nota: El cálculo es informativo y no modifica el registro. El pago de los días de incapacidad lo realiza el gobierno; el patrono no paga esos días.
                </div>
            </div>

            <div class="col-md-2 d-flex align-items-end">
                <button type="submit" class="btn btn-accent w-100">Subir</button>
            </div>
        </form>
    </div>
</div>

<!-- ===== Listado de incapacidades ===== -->
<div class="card mt-3">
    <div class="card-header d-flex justify-content-between align-items-center">
        <span>Listado</span>
        <span class="text-muted small">@((Model?.Count() ?? 0)) registro(s)</span>
    </div>
    <div class="card-body p-0">
        @if (Model == null || !Model.Any())
        {
            <div class="m-3 alert alert-warning mb-0">No hay incapacidades registradas.</div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-striped table-hover mb-0 align-middle">
                    <thead>
                        <tr>
                            <th style="min-width:180px;">Empleado</th>
                            <th style="min-width:260px;">Descripción</th>
                            <th style="min-width:200px;">Archivo</th>
                            <th style="width:160px;">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var i in Model.OrderByDescending(x => x.Id))
                        {
                            var nombre = (i.UsuarioID != null && nombrePorId.TryGetValue(i.UsuarioID, out var n)) ? n : i.UsuarioID;

                            <tr>
                                <td class="fw-semibold">@nombre</td>
                                <td class="text-truncate" style="max-width:420px;">@i.Descripcion</td>
                                <td>
                                    <div class="d-flex flex-column">
                                        <span>@(string.IsNullOrWhiteSpace(i.ArchivoNombre) ? "—" : i.ArchivoNombre)</span>
                                        <small class="text-muted">@FormatBytes(i.ArchivoTamano) · @(i.ArchivoTipo ?? "—")</small>
                                    </div>
                                </td>
                                <td>
                                    @if (i.ArchivoContenido != null)
                                    {
                                        <a asp-controller="Empleados"
                                           asp-action="DescargarIncapacidad"
                                           asp-route-id="@i.Id"
                                           class="btn btn-sm btn-outline-primary">
                                            Ver/Descargar
                                        </a>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Sin archivo</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        (function () {
            function round2(x){ return Math.round((x + Number.EPSILON) * 100) / 100; }
            function toDate(v){ const d = new Date(v); return isNaN(d.getTime()) ? null : d; }

            function recalc() {
                const ini = toDate(document.getElementById('ini_reg')?.value);
                const fin = toDate(document.getElementById('fin_reg')?.value);
                let horas = 0;
                if (ini && fin) {
                    horas = Math.max(0, (fin - ini) / 36e5); // ms -> horas
                }
                const dias = horas / 24;
                const hrsEl = document.getElementById('calc_hrs');
                const dayEl = document.getElementById('calc_dias');
                if (hrsEl) hrsEl.textContent = round2(horas).toFixed(2);
                if (dayEl) dayEl.textContent = round2(dias).toFixed(2);
            }

            document.addEventListener('input', function(e){
                if (e.target && (e.target.id === 'ini_reg' || e.target.id === 'fin_reg')) {
                    recalc();
                }
            });
        })();
    </script>
}
