@using CEGA.Models
@using CEGA.Models.ViewModels
@model MarketingPageVM

@{
    var count = Model?.Pools?.Count() ?? 0;
    var clientes = Model?.Clientes ?? Enumerable.Empty<ClienteMarketing>();
}

<!-- Header -->
<div class="d-flex justify-content-between align-items-center mt-2 mb-2">
    <h4 class="mb-0">Pools de correos</h4>
    <span class="text-muted small">@count registro(s)</span>
</div>

<!-- Alta de pool -->
<div class="card card-lg mb-3">
    <div class="card-header">Agregar pool</div>
    <div class="card-body">
        <form asp-action="CrearPoolCorreo"
              asp-controller="Marketing"
              method="post"
              enctype="multipart/form-data"
              class="row g-2"
              novalidate>
            @Html.AntiForgeryToken()
            <div asp-validation-summary="ModelOnly" class="text-danger small mb-2"></div>

            <div class="col-md-3">
                <label class="form-label" for="Nombre">Nombre</label>
                <input id="Nombre" name="Nombre" class="form-control" placeholder="Nombre del pool" required />
            </div>

            <div class="col-md-3">
                <label class="form-label" for="Mensaje">Mensaje</label>
                <textarea id="Mensaje"
                          name="Descripcion"
                          class="form-control"
                          rows="3"
                          placeholder="Escribe el mensaje a enviar..."
                          required></textarea>

                <div class="mt-2">
                    <label class="form-label" for="ArchivoAdjunto">Adjuntar archivo (opcional)</label>
                    <input id="ArchivoAdjunto"
                           name="ArchivoAdjunto"
                           type="file"
                           class="form-control"
                           accept=".pdf,.doc,.docx,.xls,.xlsx,.png,.jpg,.jpeg" />
                    <div class="form-text">Se enviará junto al mensaje. Sugerido &lt; 10&nbsp;MB.</div>
                </div>
            </div>

            <div class="col-md-5">
                <label class="form-label">Correos</label>

                <!-- El backend espera string con emails separados por ';' -->
                <input type="hidden" id="CorreosHidden" name="Correos" required />
                <span class="text-danger small" data-valmsg-for="Correos" data-valmsg-replace="true"></span>

                <!-- Buscador -->
                <input id="buscarCliente" class="form-control form-control-sm mb-2" placeholder="Buscar por nombre o correo..." />

                <!-- Select múltiple SIEMPRE visible -->
                <select id="CorreosSelect" class="form-select" size="8" multiple>
                    @if (clientes.Any())
                    {
                        foreach (var c in clientes.OrderBy(x => x.Nombre))
                        {
                            var nombre = string.IsNullOrWhiteSpace(c.Nombre) ? "(Sin nombre)" : c.Nombre;
                            var correo = c.Correo ?? "";
                            if (!string.IsNullOrWhiteSpace(correo))
                            {
                                <option value="@correo">@nombre — @correo</option>
                            }
                        }
                    }
                    else
                    {
                        <option disabled>(No hay clientes disponibles)</option>
                    }
                </select>

                <div class="form-text">
                    Selecciona uno o varios; se enviarán separados por <code>;</code>.
                </div>

                <script>
                    (function () {
                        const sel    = document.getElementById('CorreosSelect');
                        const hidden = document.getElementById('CorreosHidden');
                        const filter = document.getElementById('buscarCliente');
                        const form   = sel.closest('form');

                        function sync() {
                            const vals = Array.from(sel.selectedOptions)
                                .map(o => (o.value || '').trim())
                                .filter(Boolean);
                            hidden.value = vals.join('; ');
                        }

                        sel.addEventListener('change', sync);

                        // 🔑 asegura que el hidden esté actualizado justo antes de enviar
                        form.addEventListener('submit', function (e) {
                            sync();
                            if (!hidden.value) { // opcional: bloquea si no hay correos
                                e.preventDefault();
                                alert('Selecciona al menos un correo para el pool.');
                            }
                        });

                        if (filter) {
                            filter.addEventListener('input', function () {
                                const q = (this.value || '').toLowerCase();
                                Array.from(sel.options).forEach(opt => {
                                    const t = (opt.text || '').toLowerCase();
                                    opt.hidden = q && !t.includes(q);
                                });
                            });
                        }

                        // Inicial (por si el navegador recuerda selección)
                        sync();
                    })();
                </script>
            </div>

            <div class="col-md-1 d-flex align-items-end">
                <button type="submit" class="btn btn-accent w-100">Agregar</button>
            </div>
        </form>
    </div>
</div>

<!-- Listado -->
@if (Model?.Pools != null && Model.Pools.Any())
{
    <div class="card">
        <div class="card-header">Listado</div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-striped table-hover align-middle mb-0">
                    <thead>
                        <tr>
                            <th>Nombre</th>
                            <th style="min-width:240px;">Mensaje</th>
                            <th style="min-width:280px;">Correos</th>
                            <th style="width:220px;">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var pool in Model.Pools)
                        {
                            var correos = (pool.Correos ?? string.Empty)
                            .Split(';', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);

                            <tr>
                                <td class="fw-semibold">@pool.Nombre</td>
                                <td class="text-truncate" style="max-width:420px;">@pool.Descripcion</td>
                                <td>
                                    @if (correos.Any())
                                    {
                                        <div class="d-flex flex-wrap gap-1">
                                            @foreach (var correo in correos)
                                            {
                                                <span class="badge bg-light text-dark border">@correo</span>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Sin correos</span>
                                    }
                                </td>
                                <td>
                                    <div class="d-flex flex-wrap gap-2">
                                        <form asp-action="EditarPool"
                                              asp-controller="Marketing"
                                              method="post"
                                              class="m-0 d-inline">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="Id" value="@pool.Id" />
                                            <button type="submit" class="btn btn-sm btn-outline-primary">Editar</button>
                                        </form>

                                        <form asp-action="EliminarPool"
                                              asp-controller="Marketing"
                                              method="post"
                                              class="m-0 d-inline"
                                              onsubmit="return confirm('¿Eliminar este pool?');">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="id" value="@pool.Id" />
                                            <button type="submit" class="btn btn-sm btn-danger">Eliminar</button>
                                        </form>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
else
{
    <div class="alert alert-warning mb-0">No hay pools registrados.</div>
}
