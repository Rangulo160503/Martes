@using CEGA.Models
@using CEGA.Models.ViewModels
@{
    ViewData["Title"] = "Módulo PDF";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Header -->
<div class="py-4 text-center text-white mb-4" style="background: var(--brand-mid); border-radius: .75rem;">
    <h2 class="fw-bold mb-0">Módulo PDF</h2>
</div>

<!-- Alertas -->
@if (TempData["Mensaje"] != null)
{
    <div class="alert alert-success mb-3">@TempData["Mensaje"]</div>
}
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger mb-3">@TempData["Error"]</div>
}

<div class="row g-4">
    <!-- Subir PDF -->
    <div class="col-lg-6">
        @await Html.PartialAsync("~/Views/Pdf/Partials/_SubirPdfPartial.cshtml", new PdfUploadVM())
    </div>

    <!-- Asociar a PDF (dropdown de PDFs) + Resumen -->
    <div class="col-lg-6">
        <div class="card shadow-sm">
            <div class="card-body">
                <h5 class="card-title mb-3">Asociar Proyectos/Tareas a un PDF</h5>

                <div class="row g-2 align-items-end">
                    <div class="col-12">
                        <label for="ddlPdfs" class="form-label">Selecciona un PDF</label>
                        <select id="ddlPdfs" class="form-select">
                            <option value="">(Cargando PDFs…)</option>
                        </select>
                    </div>
                </div>

                <!-- Partial: Formulario de asociación -->
                <div id="asociarContainer" class="mt-3"></div>

                <!-- Partial: Resumen de asociaciones -->
                <div id="resumenContainer" class="mt-3"></div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <style>
        #asociarContainer, #resumenContainer {
            position: relative;
        }

        .is-loading {
            opacity: .6;
            transition: opacity .18s ease;
        }

            .is-loading::after {
                content: "";
                position: absolute;
                inset: 0;
                background: rgba(255,255,255,.4);
            }

        .loading-spinner {
            position: absolute;
            inset: 0;
            display: grid;
            place-items: center;
            pointer-events: none;
        }
    </style>

    <script>
        (async function () {
            const ddl = document.getElementById('ddlPdfs');
            const asociarContainer = document.getElementById('asociarContainer');
            const resumenContainer = document.getElementById('resumenContainer');

            function setLoading(container, on) {
                if (!container) return;
                container.classList.toggle('is-loading', on);
                if (on) {
                    if (!container.querySelector('.loading-spinner')) {
                        const s = document.createElement('div');
                        s.className = 'loading-spinner';
                        s.innerHTML = '<div class="spinner-border" role="status" aria-label="Cargando"></div>';
                        container.appendChild(s);
                    }
                } else {
                    container.querySelector('.loading-spinner')?.remove();
                }
            }

            async function cargarPdfs() {
                try {
                    console.log('[PDF] GET /Pdf/ListarPdfs');
                    const r = await fetch('/Pdf/ListarPdfs', { headers: { 'X-Requested-With': 'XMLHttpRequest' } });
                    if (!r.ok) throw new Error(`HTTP ${r.status}`);
                    const data = await r.json(); // [{id, text}]
                    ddl.innerHTML = '';
                    if (!data?.length) {
                        ddl.innerHTML = '<option value="">(No hay PDFs todavía)</option>';
                        asociarContainer.innerHTML = '<div class="alert alert-info">Sube un PDF para poder asociar proyectos y tareas.</div>';
                        resumenContainer.innerHTML = '';
                        return;
                    }
                    ddl.innerHTML = '<option value="">— Selecciona un PDF —</option>' +
                                    data.map(x => `<option value="${x.id}">${x.text}</option>`).join('');
                } catch (err) {
                    ddl.innerHTML = '<option value="">(Error al cargar)</option>';
                    asociarContainer.innerHTML = `<div class="alert alert-danger">No se pudo cargar la lista de PDFs: ${err}</div>`;
                    resumenContainer.innerHTML = '';
                }
            }

            async function cargarAsociar(idPdf, proyectoIds = []) {
                if (!idPdf) { asociarContainer.innerHTML = ''; return; }
                setLoading(asociarContainer, true);
                try {
                    const params = new URLSearchParams({ idPdf });
                    proyectoIds.forEach(id => params.append('proyectoIds', id));
                    console.log('[Asociar] GET /Pdf/AsociarPartial?' + params.toString());
                    const resp = await fetch(`/Pdf/AsociarPartial?${params.toString()}`, {
                        headers: { 'X-Requested-With': 'XMLHttpRequest' }
                    });
                    if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
                    asociarContainer.innerHTML = await resp.text();
                } catch (err) {
                    asociarContainer.innerHTML = `<div class="alert alert-danger">No se pudo cargar el partial de asociación: ${err}</div>`;
                } finally {
                    setLoading(asociarContainer, false);
                }
            }

            async function cargarResumen(idPdf) {
                if (!idPdf) { resumenContainer.innerHTML = ''; return; }
                setLoading(resumenContainer, true);
                try {
                    console.log('[Resumen] GET /Pdf/ResumenAsociaciones?id=' + idPdf);
                    const resp = await fetch(`/Pdf/ResumenAsociaciones?id=${encodeURIComponent(idPdf)}`, {
                        headers: { 'X-Requested-With': 'XMLHttpRequest' }
                    });
                    if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
                    resumenContainer.innerHTML = await resp.text();
                } catch (err) {
                    console.error('[Resumen] error:', err);
                    resumenContainer.innerHTML = `<div class="alert alert-danger">No se pudo cargar el resumen: ${err}</div>`;
                } finally {
                    setLoading(resumenContainer, false);
                }
            }

            // Cambio de PDF → recarga ambos partials
            ddl?.addEventListener('change', async () => {
                const id = ddl.value;
                await cargarAsociar(id);
                await cargarResumen(id);
            });

            // Cambio en selección de proyectos dentro del partial → recarga asociación (para filtrar tareas)
            asociarContainer.addEventListener('change', (ev) => {
                const sel = ev.target.closest('select[name="ProyectosAgregarIds"]');
                if (!sel) return;
                const idPdf = asociarContainer.querySelector('input[name="IdPdf"]')?.value;
                if (!idPdf) return;
                const proyectoIds = Array.from(sel.selectedOptions).map(o => o.value);
                cargarAsociar(idPdf, proyectoIds);
            });

            // Submit del form de asociación → refresca ambos partials
            asociarContainer.addEventListener('submit', async (ev) => {
                const form = ev.target.closest('form');
                if (!form) return;
                ev.preventDefault();

                try {
                    setLoading(asociarContainer, true);
                    const resp = await fetch(form.action, {
                        method: 'POST',
                        body: new FormData(form),
                        headers: { 'X-Requested-With': 'XMLHttpRequest' }
                    });
                    if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
                    asociarContainer.innerHTML = await resp.text();
                    const idPdf = asociarContainer.querySelector('input[name="IdPdf"]')?.value || ddl.value;
                    await cargarResumen(idPdf);
                } catch (err) {
                    asociarContainer.innerHTML = `<div class="alert alert-danger">No se pudo guardar: ${err}</div>`;
                } finally {
                    setLoading(asociarContainer, false);
                }
            });

            // Inicial
            await cargarPdfs();
            // Si ya quedó un valor seleccionado (o el navegador recuerda el último), dispara ambas cargas
            if (ddl.value) {
                await cargarAsociar(ddl.value);
                await cargarResumen(ddl.value);
                    }function getQueryParam(name) {
              const u = new URL(window.location.href);
              return u.searchParams.get(name) ?? "";
          }

          // Inicial
          await cargarPdfs();

          // Si venimos desde /Pdf/Gestionar?id=123 o el navegador recuerda el último
          const preselectId = getQueryParam('id');
          if (preselectId) {
              // Coloca la opción si existe y dispara las cargas
              const opt = Array.from(ddl.options).find(o => o.value === preselectId);
              if (opt) ddl.value = preselectId;
          }
          if (ddl.value) {
              await cargarAsociar(ddl.value);
              await cargarResumen(ddl.value);
          }
        })();
    </script>
}
