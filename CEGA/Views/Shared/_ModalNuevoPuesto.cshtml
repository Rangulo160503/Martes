<div class="modal fade" id="modalNuevoPuesto" tabindex="-1" aria-hidden="true"
     data-bs-backdrop="static" data-bs-keyboard="false" aria-labelledby="modalNuevoPuestoLabel">
    <div class="modal-dialog">
        <form id="formNuevoPuesto" class="modal-content">
            @Html.AntiForgeryToken()

            <div class="modal-header">
                <h5 class="modal-title" id="modalNuevoPuestoLabel">Crear puesto</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>

            <div class="modal-body">
                <div class="mb-3">
                    <label for="Puesto_Nombre" class="form-label">Nombre</label>
                    <input type="text" class="form-control" id="Puesto_Nombre" name="Nombre" required />
                    <div class="invalid-feedback">Campo obligatorio.</div>
                </div>
                <div class="mb-3">
                    <label for="Puesto_Codigo" class="form-label">Código (opcional)</label>
                    <input type="text" class="form-control" id="Puesto_Codigo" name="Codigo" />
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="submit" class="btn btn-primary">Guardar</button>
            </div>
        </form>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
      const form = document.getElementById('formNuevoPuesto');
      form?.addEventListener('submit', async (e) => {
        e.preventDefault();
        const btn = form.querySelector('button[type="submit"]');
        btn.disabled = true;

        try {
          const res = await fetch('@Url.Action("CrearRapido", "Puesto")', {
            method: 'POST',
            headers: { 'X-Requested-With': 'XMLHttpRequest' },
            body: new FormData(form)
          });
          if (!res.ok) throw new Error('No se pudo guardar el puesto.');
          const { id, nombre } = await res.json(); // { id, nombre }

          const sel = document.getElementById('PuestoId');
          if (sel) {
            // 1) habilitar y limpiar placeholder si no había
            if (sel.hasAttribute('disabled')) {
              sel.removeAttribute('disabled');
              sel.classList.remove('is-empty');
              if (sel.options.length === 1 && sel.options[0].value === "") {
                sel.options[0].text = "— Seleccione un puesto —";
              }
            }

            // 2) agregar la opción nueva (y seleccionarla)
            let opt = Array.from(sel.options).find(o => o.value == id);
            if (!opt) {
              opt = new Option(nombre, id, true, true);
              sel.add(opt);
            } else {
              opt.selected = true;
            }
            sel.value = id;
            sel.dispatchEvent(new Event('change'));
          }

          // 3) cerrar modal y resetear form
          bootstrap.Modal.getOrCreateInstance(document.getElementById('modalNuevoPuesto')).hide();
          form.reset();
          form.querySelector('input[name="Moneda"]').value = 'CRC'; // default
          form.querySelector('#PuestoActivo').checked = true;       // default
        } catch (err) {
          alert(err.message || 'Error inesperado.');
        } finally {
          btn.disabled = false;
        }
      });
    });
</script>
